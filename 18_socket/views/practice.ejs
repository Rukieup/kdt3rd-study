<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>채팅 프로그램</title>

    <!-- socket.io cdn -->
    <script
      src="https://cdn.socket.io/4.5.3/socket.io.min.js"
      integrity="sha384-WPFUvHkB1aHA5TDSZi6xtDgkF0wXJcIIxXhC6h8OT8EH3fC5PWro5pWJ1THjcfEi"
      crossorigin="anonymous"
    ></script>

    <style>
      .chat-list {
        background-color: skyblue;
        width: 50%;
        height: 500px;
        padding: 10px;
        overflow-y: auto;
      }

      .chat-list p {
        margin-top: 5px;
        margin-bottom: 3px;
      }

      .chat-list div div {
        display: inline-block;
        max-width: 80%; 
      }

      .my-chat {
        text-align: right;
        margin-right: 2px;
      }

      .my-chat div {
        background-color: yellow;
      }

      .other-chat div {
        background-color: white;
      }

      .notice {
        text-align: center;
        color: navy;
        font-size: 12px;
      }

      .d-none {
        display: none;
      }
    </style>
  </head>
  <body>
    <h1>Socket.io</h1>

    <!-- [실습44-2] 채팅창 입장 문구 안내 socket.it -> nickname -->
    <div class="entry-box">
      <input type="text" id="nickname" placeholder="닉네임" autofocus required/>
      <button type="button" onclick="entry();">입장</button>
    </div>

    <!-- [실습43] 채팅창 UI 만들기 -->
    <div class="chat-box d-none">
      <div id="chat-list" class="chat-list">
        <!-- [실습43] 임시 데이터 -->
        <!-- <div class="my-chat">
          <div>user1: msg1</div>
        </div>
        <div class="other-chat">
          <div>user2: msg2</div>
        </div>
        <div class="notice">xx가 입장했습니다.</div> -->
      </div>
      <select id="nick-list">
        <!-- 임시 데이터 -->
        <!-- <option value="all">전체</option>
        <option value="socketId1">nick1</option>
        <option value="socketId2">nick2</option> -->
      </select>에게
      <input type="text" id="message" onkeydown="if(event.keyCode==13) javascript: send();" placeholder="">
      <button type="button" onclick="send();" >전송</button>
    </div>

    <script>
      let socket = io.connect(); // socket 사용을 위한 객체 생성
      let myNick; // 내 닉네임 설정

      socket.on('connect', () => {
        console.log('**** ⭕ Client Socket Connected >>', socket.id);
      });

      // [실습44] 채팅창 입장 안내 문구
      // notice 이벤트를 받아서 공지 문구를 출력
      socket.on('notice', (msg) => {
        console.log('socket on notice >> ', msg);

        document
          .querySelector('#chat-list')
          .insertAdjacentHTML('beforeend', `<div class="notice">${msg}</div>`);
      });

// [실습44-2] 채팅창 입장 안내 문구 socket.id -> nickname
      function entry() {
        // console.log(document.querySelector('#nickname').value);
        socket.emit('setNick', document.querySelector('#nickname').value);
      }

      socket.on('entrySuccess', (nick) => {
        myNick = nick;

        // 입력창 비활성화
        document.querySelector('#nickname').disabled = true;
        // [입장] 버튼 비활성화
        document.querySelector('.entry-box > button').disabled = true;
        // 채팅 박스를 보여줌
        document.querySelector('.chat-box').classList.remove('d-none');
        document.querySelector('.entry-box').classList.add('d-none');
      });

      // 'error' 이벤트 받기 -> on
      // alert() 메세지 출력
      socket.on('error', (data) => {
        alert(data);
      });

      // [실습45] 채팅창 메세지 전송 Step1
      // "send" 이벤트 전송하기
      function send() {

        let msg = document.querySelector('#message').value
        if (msg.length === 0) {
          return
        } else {
          const data = {
            myNick: myNick,
            dm: document.querySelector('#nick-list').value,
            msg: document.querySelector('#message').value,
          };
          socket.emit('send', data);
        }

        // let msgInput = document.querySelector('#message')
        // input.value  //  p,div.textContent 
        document.querySelector('#message').value = '';
      }

      // [실습45] 채팅창 메세지 전송 Step2
      // "newMessage" 이벤트를 전달받기 { 닉네임, 메세지내용 }
      // data => { nick: 'a', msg: 'hello' }
      socket.on('newMessage', (data) => {
        console.log('socket on newMessage >> ', data);

        // 생성해야할 채팅 html 구조
        // <div class="my-chat">
        //   <div>user1: msg1</div>
        // </div>
        // <div class="other-chat">
        //   <div>user2: msg2</div>
        // </div>
        let chatList = document.querySelector('#chat-list'); // #chat-list 선택
        let div = document.createElement('div'); // .my-chat or .other-chat 생성
        let divNick = document.createElement('p'); // .my-chat or .other-chat 생성
        // <div></div>
        let divChat = document.createElement('div'); // 가장 안쪽 div (메세지 박스) 생성
        // <div></div>

        // 새 메세지(data => { nick: 'a', msg: 'hello' })가 도착했는데
        // myNick에 저장된 현재 내 닉네임과
        // 새 메세지(data)의 nick이 같다면, 내가 보낸 채팅
        // 새 메세지(data)의 nick이 다르면, 상대방이 보낸 채팅
        if (myNick === data.nick) {
          div.classList.add('my-chat'); // <div class="my-chat"></div>
        } else {
          div.classList.add('other-chat'); // <div class="other-chat"></div>
        }

        // [실습46] DM 기능 추가
        console.log('send data check >> ', data);
        // 전체: {nick: 'a', msg: 'xx'} 
        // dm: {nick: 'a', msg: 'xx', dm:'(속닥속닥)'} 
        if(data.dm) {
          div.classList.add('secret-chat')
          divChat.textContent = data.dm;
        }

        divChat.textContent += data.msg; // <div>nick : msg</div>
        divNick.textContent = data.nick;
        div.append(divNick);
        div.append(divChat);
        chatList.append(div);

        // 스크롤바 특정 위치로 포커스
        chatList.scrollTop = chatList.scrollHeight;
        // chatList.scrollIntoView({ behavior: 'smooth', block: 'nearest'});
        // let chat = document.querySelector('my-chat')
      });

      // [실습46] DM 기능 추가
      socket.on('updateNick', (nickArray) => {
        console.log('socket on updateNick >>', nickArray);
        // 미션!!!!!!!
        // 유저목록 하나하나를 option태그로 만들어서 select에 추가
        // select 태그 내부에 추가되어야 할 코드 형식
        // <option value="all">전체</option>
        // <option value="socketId1">nick1</option>
        // <option value="socketId2">nick2</option>
        let options = `<option value="all">전체</option>`;

        // 1. 반복문 사용해서 option 태그 하나하나 완성
        for (const socketId in nickArray) {
          console.log(`${socketId}, ${nickArray[socketId]}`) // p2Y2zKCkcl4LWEsvAAAN, aa
          options += `<option value="${socketId}">${nickArray[socketId]}</option>`
        }
        // 2. select 태그에 option 태그들을 추가
        // innerHTML: 기존 내용 무시하고 채움
        document.querySelector('#nick-list').innerHTML = options;
      });

    </script>
  </body>
</html>